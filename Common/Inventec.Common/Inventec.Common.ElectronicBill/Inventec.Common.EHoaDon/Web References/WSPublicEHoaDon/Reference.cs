/* IVT
 * @Project : hisnguonmo
 * Copyright (C) 2017 INVENTEC
 *  
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *  
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.See the
 * GNU General Public License for more details.
 *  
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace Inventec.Common.EHoaDon.WSPublicEHoaDon {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="WSPublicEHoaDonSoap", Namespace="http://tempuri.org/")]
    public partial class WSPublicEHoaDon : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback ExecCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteCommandOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddBlockedIPOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public WSPublicEHoaDon() {
            this.Url = global::Inventec.Common.EHoaDon.Properties.Settings.Default.Inventec_Common_EHoaDon_WSPublicEHoaDon_WSPublicEHoaDon;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event ExecCommandCompletedEventHandler ExecCommandCompleted;
        
        /// <remarks/>
        public event ExecuteCommandCompletedEventHandler ExecuteCommandCompleted;
        
        /// <remarks/>
        public event AddBlockedIPCompletedEventHandler AddBlockedIPCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecCommand", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecCommand(string partnerGUID, string CommandData) {
            object[] results = this.Invoke("ExecCommand", new object[] {
                        partnerGUID,
                        CommandData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecCommandAsync(string partnerGUID, string CommandData) {
            this.ExecCommandAsync(partnerGUID, CommandData, null);
        }
        
        /// <remarks/>
        public void ExecCommandAsync(string partnerGUID, string CommandData, object userState) {
            if ((this.ExecCommandOperationCompleted == null)) {
                this.ExecCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecCommandOperationCompleted);
            }
            this.InvokeAsync("ExecCommand", new object[] {
                        partnerGUID,
                        CommandData}, this.ExecCommandOperationCompleted, userState);
        }
        
        private void OnExecCommandOperationCompleted(object arg) {
            if ((this.ExecCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecCommandCompleted(this, new ExecCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteCommand", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ExecuteCommand(string PartnerGUID, string EncryptedCommandData) {
            object[] results = this.Invoke("ExecuteCommand", new object[] {
                        PartnerGUID,
                        EncryptedCommandData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteCommandAsync(string PartnerGUID, string EncryptedCommandData) {
            this.ExecuteCommandAsync(PartnerGUID, EncryptedCommandData, null);
        }
        
        /// <remarks/>
        public void ExecuteCommandAsync(string PartnerGUID, string EncryptedCommandData, object userState) {
            if ((this.ExecuteCommandOperationCompleted == null)) {
                this.ExecuteCommandOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteCommandOperationCompleted);
            }
            this.InvokeAsync("ExecuteCommand", new object[] {
                        PartnerGUID,
                        EncryptedCommandData}, this.ExecuteCommandOperationCompleted, userState);
        }
        
        private void OnExecuteCommandOperationCompleted(object arg) {
            if ((this.ExecuteCommandCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteCommandCompleted(this, new ExecuteCommandCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddBlockedIP", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddBlockedIP(string TokenID, string IPAddress) {
            object[] results = this.Invoke("AddBlockedIP", new object[] {
                        TokenID,
                        IPAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddBlockedIPAsync(string TokenID, string IPAddress) {
            this.AddBlockedIPAsync(TokenID, IPAddress, null);
        }
        
        /// <remarks/>
        public void AddBlockedIPAsync(string TokenID, string IPAddress, object userState) {
            if ((this.AddBlockedIPOperationCompleted == null)) {
                this.AddBlockedIPOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddBlockedIPOperationCompleted);
            }
            this.InvokeAsync("AddBlockedIP", new object[] {
                        TokenID,
                        IPAddress}, this.AddBlockedIPOperationCompleted, userState);
        }
        
        private void OnAddBlockedIPOperationCompleted(object arg) {
            if ((this.AddBlockedIPCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddBlockedIPCompleted(this, new AddBlockedIPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ExecCommandCompletedEventHandler(object sender, ExecCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void ExecuteCommandCompletedEventHandler(object sender, ExecuteCommandCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteCommandCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteCommandCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    public delegate void AddBlockedIPCompletedEventHandler(object sender, AddBlockedIPCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2556.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddBlockedIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddBlockedIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
